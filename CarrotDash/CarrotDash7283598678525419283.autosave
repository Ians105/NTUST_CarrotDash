// Game modes
final int GAME_HOME = 0;
final int GAME_RUN = 1;
final int GAME_WIN = 2;
final int GAME_LOSE = 3;

// Speed for grid like movement
final int SPEED = 100;

// Sprites variable
final int SPRITE_SIZE = 100;

// Player variables
PImage[] playerSprites = new PImage[6];
Player p;

// Enemy variables
PImage[][] enemySprites = new PImage[3][2];
ArrayList<Enemy> enemies = new ArrayList<Enemy>();
int enemySpawnInterval;
int lastEnemySpawnTime = 0;

// Item Variables
PImage[] itemSprites = new PImage[3];
ArrayList<Item> items = new ArrayList<Item>();
int itemSpawnInterval = 5000;
int lastItemSpawnTime = 0;

// Grid Variables
Grid grid;

// Game Variables
int gameState = GAME_HOME;
int gameStartTime = 0;
int level = 1;

// Background and UI Images
PImage titleImage;
PImage backgroundImage;

void setup() {
  size(1600, 900);
  loadSprites();


  grid = new Grid();
  p = new Player();

  frameRate(60);
}

void draw() {
  // Clear background first to prevent frame ghosting
  background(0);

  if (p != null && !p.isAlive) {
    gameState = GAME_LOSE;
  }

  switch(gameState) {
  case GAME_RUN:
    // Show background image
    if (backgroundImage != null) {
      image(backgroundImage, 0, 0, width, height);
    } else {
      background(50, 150, 50);
    }

    if (grid != null) grid.show();
    if (p != null) p.show();

    // Spawn enemies every interval - 修改怪物生成邏輯
    if (millis() - lastEnemySpawnTime > enemySpawnInterval) {
      String[] enemyTypes = {"pest", "bird", "mushroom", "gopher"};
      String randomType = enemyTypes[(int)random(enemyTypes.length)];

      // 生成怪物在正確的網格位置
      float spawnX, spawnY;

      if (randomType.equals("mushroom")) {
        // 蘑菇在網格內隨機位置
        int randomRow = (int)random(grid.rows);
        int randomCol = (int)random(grid.cols);
        PVector gridPos = grid.getGridCell(randomRow, randomCol);
        spawnX = gridPos.x;
        spawnY = gridPos.y;
      } else {
        // 其他怪物從邊緣進入，但要對齊網格行或列
        boolean fromLeft = random(1) < 0.5;

        if (fromLeft) {
          // 從左邊進入，隨機選擇一行
          int randomRow = (int)random(grid.rows);
          spawnX = -100; // 螢幕左側外
          spawnY = grid.topBound() + randomRow * grid.cellSize;
        } else {
          // 從右邊進入，隨機選擇一行
          int randomRow = (int)random(grid.rows);
          spawnX = width + 100; // 螢幕右側外
          spawnY = grid.topBound() + randomRow * grid.cellSize;
        }
      }

      enemies.add(new Enemy(spawnX, spawnY, randomType));
      lastEnemySpawnTime = millis();
    }

    // Spawn items
    if (millis() - lastItemSpawnTime > itemSpawnInterval) {
      String[] itemTypes = {"flip", "star", "poison", "scarecrow", "gridIndicator"};
      String randomType = itemTypes[(int)random(itemTypes.length)];
      items.add(new Item(random(grid.leftBound(), grid.rightBound()-80),
        random(grid.topBound(), grid.bottomBound()-80), randomType));
      lastItemSpawnTime = millis();
    }

    // Update and show enemies
    for (int i = enemies.size() - 1; i >= 0; i--) {
      Enemy e = enemies.get(i);
      e.update();
      e.show();

      // Enhanced collision detection
      if (e.touches(p) && !p.isInvincible) {
        p.die();
      }

      if (e.isOffScreen()) {
        enemies.remove(i);
      }
    }

    // Update and show items
    for (int i = items.size() - 1; i >= 0; i--) {
      Item item = items.get(i);
      item.update();
      item.show();

      // Item collision with player
      if (item.touches(p)) {
        item.applyEffect(p);
        items.remove(i);
      }
    }

    int survivalTime = millis() - gameStartTime;
    if (survivalTime >= 60000) {
      gameState = GAME_WIN;
    }

    // Enhanced UI with semi-transparent background for readability
    fill(0, 150);
    noStroke();
    rectMode(CORNER); // 確保 UI 使用正確的矩形模式
    rect(10, 10, 300, 200);

    fill(255);
    textSize(32);
    textAlign(LEFT, TOP);
    text("Time: " + (survivalTime / 1000) + "s", 20, 20);
    text("Level: " + level, 20, 60);

    // Show player status with colors
    if (p.isFlipped) {
      fill(255, 0, 255);
      text("FLIPPED!", 20, 100);
    }
    if (p.isInvincible) {
      fill(255, 255, 0);
      text("INVINCIBLE!", 20, 140);
    }
    if (p.showGridIndicator) {
      fill(0, 255, 0);
      text("GRID TRACKER!", 20, 180);
    }

    // Show enemy count
    fill(0, 150);
    rect(width - 220, 10, 210, 60);
    fill(255, 100, 100);
    textAlign(LEFT, TOP);
    text("Enemies: " + enemies.size(), width - 200, 20);

    break;

  case GAME_LOSE:
    loadGameResult("YOU LOST!");
    break;

  case GAME_WIN:
    loadGameResult("YOU WIN!");
    break;

  case GAME_HOME:
    // Clear background first
    background(0);

    // Show background image - 修復背景顯示
    if (backgroundImage != null) {
      // 確保背景圖片填滿整個螢幕
      imageMode(CORNER);
      image(backgroundImage, 0, 0, width, height);
    }

    // Show title image with proper scaling and positioning
    if (titleImage != null) {
      // Calculate scale to fit within 60% of screen width and 25% of screen height
      float maxTitleWidth = width * 0.6;
      float maxTitleHeight = height * 0.25;
      float titleScale = min(maxTitleWidth / titleImage.width, maxTitleHeight / titleImage.height);

      float titleW = titleImage.width * titleScale;
      float titleH = titleImage.height * titleScale;

      imageMode(CENTER);
      image(titleImage, width/2, height/2 - 100, titleW, titleH);
    } else {
      // Fallback text title
      fill(255, 140, 0);
      textAlign(CENTER, CENTER);
      textSize(72);
      text("CARROT DASH", width / 2, height / 2 - 100);
    }

    // Menu options with better styling and positioning
    fill(0, 180);
    rectMode(CENTER);
    rect(width/2, height/2 + 100, 500, 250);

    fill(255);
    textAlign(CENTER, CENTER);
    textSize(36);
    text("Choose a Level", width / 2, height / 2 + 20);

    textSize(28);
    text("Press 1 for Level 1 (3x3)", width / 2, height / 2 + 60);
    text("Press 2 for Level 2 (4x4)", width / 2, height / 2 + 100);
    text("Press 3 for Level 3 (5x5)", width / 2, height / 2 + 140);

    // Instructions
    textSize(20);
    fill(200);
    text("Use WASD or Arrow Keys to move", width / 2, height / 2 + 180);
    break;

  default:
    background(0);
  }
}

void keyPressed() {
  if (gameState == GAME_RUN && p != null) {
    if (keyCode == UP    || key == 'w' || key == 'W') p.move("UP");
    if (keyCode == DOWN  || key == 's' || key == 'S') p.move("DOWN");
    if (keyCode == LEFT  || key == 'a' || key == 'A') p.move("LEFT");
    if (keyCode == RIGHT || key == 'd' || key == 'D') p.move("RIGHT");
  }

  if (gameState == GAME_HOME) {
    if (key == '1') {
      level = 1;
      startGame();
    } else if (key == '2') {
      level = 2;
      startGame();
    } else if (key == '3') {
      level = 3;
      startGame();
    }
  }

  if (gameState == GAME_LOSE || gameState == GAME_WIN) {
    if (key == 'r' || key == 'R') {
      resetGame();
    }
  }
}

void resetGame() {
  gameState = GAME_HOME;
  enemies.clear();
  items.clear();
  level = 1; // Reset to default level
  grid = new Grid(); // Recreate grid
  p = new Player(); // Recreate player
  lastEnemySpawnTime = millis();
  lastItemSpawnTime = millis();
}

void startGame() {
  println("Starting game with level: " + level); // Debug
  gameState = GAME_RUN;

  // 重新建立網格和玩家
  grid = new Grid();
  p = new Player();

  enemies.clear();
  items.clear();
  lastEnemySpawnTime = millis();
  lastItemSpawnTime = millis();
  gameStartTime = millis();

  // Set enemy spawn interval based on level
  if (level == 1) enemySpawnInterval = 3000;
  else if (level == 2) enemySpawnInterval = 2000;
  else if (level == 3) enemySpawnInterval = 1000;
  else enemySpawnInterval = 2000;
}

void loadSprites() {
  // Player sprites - 使用胡蘿蔔圖片
  try {
    playerSprites[0] = loadImage("data/carrotMain.png");    // default
    playerSprites[1] = loadImage("data/carrotUp.png");      // up
    playerSprites[2] = loadImage("data/carrotRight.png");   // right
    playerSprites[3] = loadImage("data/carrotDown.png");    // down
    playerSprites[4] = loadImage("data/carrotLeft.png");    // left
    playerSprites[5] = loadImage("data/carrotMain.png");    // defeated

    // Load UI images
    titleImage = loadImage("data/Title.PNG");
    backgroundImage = loadImage("data/startBG.png");

    println("All sprites loaded successfully!");
  }
  catch (Exception e) {
    println("Error loading sprites: " + e.getMessage());
    // 建立空白圖片作為後備
    for (int i = 0; i < playerSprites.length; i++) {
      playerSprites[i] = createImage(100, 100, RGB);
    }
  }
}

void loadGameResult(String message) {
  // Show background - 修復背景顯示
  if (backgroundImage != null) {
    imageMode(CORNER); // 確保使用角落模式
    image(backgroundImage, 0, 0, width, height);
  } else {
    background(0);
  }

  fill(0, 200);
  noStroke();
  rectMode(CENTER);
  rect(width / 2, height / 2, 600, 300);

  fill(255);
  textSize(48);
  textAlign(CENTER, CENTER);
  text(message, width/2, height/2 - 40);
  textSize(24);
  text("Press R to restart", width/2, height/2 + 20);
}
